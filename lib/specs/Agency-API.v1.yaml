openapi: 3.0.1
info:
  title: Agency API
  description: Affinity labs api for Agency microservice.
  version: v2
  termsOfService: 'https://affinityafrica.com/legal/'
  contact:
    name: Ayeba Amihere
    email: ayeba.amihere@affinitylabs.com
servers:
  - url: 'https://api.affinitylabstest.com/{basePath}'
    variables:
      basePath:
        default: agency
tags:
  - name: Agency
  - name: Authentication
  - name: Customers
  - name: Tasks
  - name: Statistics
paths:
  '/customers/{customerId}/times':
    put:
      tags:
        - Customers
      description: Customer Deposit Schedule PUT endpoint
      operationId: putDepositTimesResponse
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/DepositScheduleRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepositScheduleRequest'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: PUT
        uri: 'https://${stageVariables.albUrl}/agency/customers/{customerId}/times'
        requestParameters:
          integration.request.path.customerId: method.request.path.customerId
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /withdrawals:
    get:
      tags:
        - Agency
      description: Get all withdrawals endpoint
      operationId: getWithdrawals
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/withdrawals'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Agency
      description: Initiate withdrawal endpoint
      operationId: postWithdrawals
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/withdrawals'
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /withdrawals/otp:
    post:
      tags:
        - Agency
      description: Get withdrawal otp generation endpoint
      operationId: postWithdrawalsOtp
      parameters:
        - name: ref
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/withdrawals/otp'
        requestParameters:
          integration.request.path.ref: method.request.path.ref
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /withdrawals/confirm:
    post:
      tags:
        - Agency
      description: Confirm Withdrawal endpoint
      operationId: postWithdrawalsConfirm
      parameters:
        - name: otp
          in: query
          required: true
          schema:
            type: string
        - name: ref
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/withdrawals/confirm'
        requestParameters:
          integration.request.path.otp: method.request.path.otp
          integration.request.path.ref: method.request.path.ref
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /tasks:
    get:
      tags:
        - Agency
        - Tasks
      description: Get tasks endpoint
      operationId: getTasks
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-auth:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/tasks'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/tasks'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Agency
        - Tasks
      description: Create task endpoint
      operationId: postTasks
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
        required: true
      responses:
        '201':
          description: 201 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/tasks'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    delete:
      tags:
        - Agency
        - Tasks
      description: Delete task endpoint
      operationId: deleteTasks
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: DELETE
        uri: 'https://${stageVariables.albUrl}/agency/tasks'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  '/supervisors/shortage/{id}':
    post:
      tags:
        - Supervisor
      description: Post shortage for a particular agent
      operationId: postShortage
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/shortage/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /supervisors/end-of-day:
    get:
      tags:
        - Supervisor
      description: GET end of day transactions for all agents
      operationId: getEndOfDay
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndOfDayPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/end-of-day'
        requestParameters:
          integration.request.path.start: method.request.path.start
          integration.request.path.end: method.request.path.end
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Supervisor
      description: Acknowledge an end of day transaction using transaction id
      operationId: postEndOfDayWithTransactionId
      parameters:
        - name: tid
          in: query
          required: true
          schema:
            type: string
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/end-of-day'
        requestParameters:
          integration.request.path.tid: method.request.path.tid
          integration.request.path.start: method.request.path.start
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: tid
          in: query
          required: false
          schema:
            type: string
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/end-of-day/{id}':
    get:
      tags:
        - Supervisor
      description: GET end of day transactions for specific agent
      operationId: getEndOfDayWithAgent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupedTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/end-of-day/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.start: method.request.path.start
          integration.request.path.end: method.request.path.end
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Supervisor
      description: Acknowledge all end of day transactions for specific agent
      operationId: postEndOfDayWithAgent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/end-of-day/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.start: method.request.path.start
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /targets:
    post:
      tags:
        - Agency
      description: Updating respective targets belonging to an agent.
      operationId: postUpdateTargets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentTargetRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentTargetResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/targets'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 201}'
        passthroughBehavior: when_no_match
        type: mock
  /supervisors/end-of-day/postentry:
    post:
      tags:
        - Supervisor
      description: Making a post entry for a transaction
      operationId: postPostEntryTransaction
      parameters:
        - name: tid
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostEntryRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/end-of-day/postentry'
        requestParameters:
          integration.request.path.tid: method.request.path.tid
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: tid
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/agents/{id}/signoff':
    post:
      tags:
        - Supervisor
      description: GET all agents in your branch
      operationId: postSignOff
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignOffRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}/signoff'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/agency/supervisors/agents/{id}/link':
    post:
      tags:
        - Supervisor
      description: Assign customer(s) to agent
      operationId: postLinkAgentToCustomer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCustomerAssignmentRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentCustomerAssignmentResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}/link'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /agency/supervisors/agents/customers/unassigned:
    get:
      tags:
        - Supervisor
      description: Assign customer(s) to agent
      operationId: getUnassignedCustomers
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupervisorCustomersPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/customers/unassigned'
        requestParameters:
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /referrals:
    post:
      tags:
        - Customers
      description: Referrals endpoint
      operationId: postReferrals
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/referrals'
        responses:
          default:
            statusCode: '201'
        requestParameters:
          integration.request.path.p: method.request.path.p
        passthroughBehavior: when_no_match
  /notifications:
    get:
      tags:
        - Agency
      description: Notifications endpoint
      operationId: getNotifications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/notifications'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Agency
      description: Create a notification assigned to an agent
      operationId: postNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/notifications'
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /login:
    post:
      tags:
        - Authentication
      description: 'Login agents here with email, password'
      operationId: postLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgencyLoginRequest'
        required: true
      responses:
        '200':
          description: Ok response with token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/login'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /keep-alive:
    post:
      tags:
        - Authentication
      description: Extend token lifetime here.
      operationId: postKeepAlive
      responses:
        '200':
          description: Ok response with token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshToken'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/keep-alive'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /devices:
    post:
      summary: ''
      description: Register devices here
      operationId: postDevices
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRequest'
        required: true
      responses:
        '201':
          description: 201 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/devices'
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /devices/link:
    post:
      tags:
        - Authentication
      description: Link your device to an agent here
      operationId: postLinkUserToDevice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRequest'
        required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/devices/link'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /deposits:
    get:
      tags:
        - Customers
      description: Deposits endpoint
      operationId: getDeposits
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/deposits'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Agency
      description: Create new deposit endpoint
      operationId: postDeposits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/deposits'
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /deposits/confirm:
    post:
      tags:
        - Agency
      description: Confirm Deposit endpoint
      operationId: postDepositsConfirm
      parameters:
        - name: ref
          in: query
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/deposits/confirm'
        requestParameters:
          integration.request.path.ref: method.request.path.ref
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /day/start:
    post:
      tags:
        - Agency
      description: Post start a day for an agent
      operationId: postStart
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/day/start'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /day/end:
    post:
      tags:
        - Agency
      description: Post end a day for an agent
      operationId: postEnd
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/day/end'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /location:
    post:
      tags:
        - Agency
      description: Log a new location coordinate for an agent
      operationId: postAgentLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationUpdateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/location'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /day/status:
    get:
      tags:
        - Agency
      description: Check status of day for an agent
      operationId: getDayStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayStatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/day/status'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /customers/update:
    post:
      tags:
        - Customers
      description: Update with customer external id endpoint
      operationId: postUpdateWithConsumerAppCustomerId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerIdRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/customers/update'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /cron/customers-mambu:
    post:
      tags:
        - Cron
      description: Cron to fetch customers in mambu endpoint
      operationId: postFetchCustomers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/cron/customers-mambu'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /cron/customers-mambu/complete:
    post:
      tags:
        - Cron
      description: Complete Cron to fetch customers in mambu endpoint
      operationId: postTotalFetchCustomers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/cron/customers-mambu/complete'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /cron/accounts-mambu:
    post:
      tags:
        - Cron
      description: Cron to fetch accounts in mambu endpoint
      operationId: postFetchAccounts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/cron/accounts-mambu'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /cron/accounts-mambu/complete:
    post:
      tags:
        - Cron
      description: Complete Cron to fetch accounts in mambu endpoint
      operationId: postTotalFetchAccounts
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/cron/accounts-mambu/complete'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /application:
    get:
      tags:
        - Customers
      description: Retrieve the up-to-date customer application from cache.
      operationId: getCustomerApplication
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApplication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/application'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.p: method.request.path.p
        passthroughBehavior: when_no_match
    post:
      tags:
        - Customers
      description: Upload full customer application for onboarding.
      operationId: postCustomerApplication
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerApplication'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/application'
        requestParameters:
          integration.request.path.p: method.request.path.p
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
    delete:
      tags:
        - Customers
      description: Remove a customer application from cache.
      operationId: deleteCustomerApplication
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerApplication'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: DELETE
        uri: 'https://${stageVariables.albUrl}/agency/application'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.p: method.request.path.p
        passthroughBehavior: when_no_match
    patch:
      tags:
        - Customers
      description: 'Save for later functionality,for customer applications.'
      operationId: patchCustomerApplication
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerApplication'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: PATCH
        uri: 'https://${stageVariables.albUrl}/agency/application'
        responses:
          default:
            statusCode: '200'
        requestParameters:
          integration.request.path.p: method.request.path.p
        passthroughBehavior: when_no_match
  /application/otp:
    post:
      tags:
        - Customers
      description: Send/Resend otp to new customer for onboarding
      operationId: postCustomerOtp
      parameters:
        - name: p
          in: query
          required: true
          schema:
            type: string
        - name: resend
          in: query
          required: false
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/application/otp'
        responses:
          default:
            statusCode: '201'
        requestParameters:
          integration.request.path.p: method.request.path.p
          integration.request.path.resend: method.request.path.resend
        passthroughBehavior: when_no_match
  /accounts:
    get:
      tags:
        - Customers
      description: Account activity log endpoint
      operationId: getAccounts
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/accounts'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    post:
      tags:
        - Agency
      description: Create account for customer endpoint
      operationId: postAccounts
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
        - name: type
          in: query
          required: true
          schema:
            type: string
            enum:
              - GROWTH
              - MOBI
              - STAFF
              - FUTURE
              - DAILY
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/accounts'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.type: method.request.path.type
        responses:
          default:
            statusCode: '201'
        passthroughBehavior: when_no_match
  /settings:
    get:
      tags:
        - Agency
      description: Get Settings endpoint
      operationId: getSettings
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingModel'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/settings'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    patch:
      tags:
        - Agency
      description: Patch Settings endpoint
      operationId: patchSettings
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SettingModel'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: PATCH
        uri: 'https://${stageVariables.albUrl}/agency/settings'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /transactions:
    get:
      tags:
        - Agency
      description: Get details/statistics on transactions made so far
      operationId: getTransactions
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/transactions'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  '/transactions/{accountEncodedId}':
    get:
      tags:
        - Agency
      description: Get transactions linked to a single account
      operationId: getTransactions_1
      parameters:
        - name: accountEncodedId
          in: path
          required: true
          schema:
            type: string
        - name: pageable
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/transactions/{accountEncodedId}'
        requestParameters:
          integration.request.path.accountEncodedId: method.request.path.accountEncodedId
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  '/tasks/{taskId}':
    get:
      tags:
        - Agency
        - Tasks
      description: Task detail endpoint
      operationId: getTaskDetail
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'A task detail (Name, Start date and End date)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/tasks/{taskId}'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /supervisors/callovers:
    get:
      tags:
        - Supervisor
      description: GET callover for end of day for a specific agents
      operationId: getCalloversForAll
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupedTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/callovers'
        requestParameters:
          integration.request.path.start: method.request.path.start
          integration.request.path.end: method.request.path.end
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/callovers/{id}':
    get:
      tags:
        - Supervisor
      description: GET callover for end of day for all agents
      operationId: getCallover
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - schema:
            type: string
          in: query
          name: email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupedTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/callovers/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.start: method.request.path.start
          integration.request.path.end: method.request.path.end
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  /supervisors/agents:
    get:
      tags:
        - Supervisor
      description: GET all agents filtered by branch
      operationId: getAgents
      parameters:
        - name: b
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentsPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents'
        requestParameters:
          integration.request.path.b: method.request.path.b
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: b
          in: query
          required: false
          schema:
            type: string
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/agents/{id}':
    get:
      tags:
        - Supervisor
      description: GET specific agent with id
      operationId: getAgentsWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExtResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/agents/{id}/transactions':
    get:
      tags:
        - Supervisor
      description: GET all agents in your branch
      operationId: getAgentTransactionsWithId
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}/transactions'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/agents/{id}/details':
    get:
      tags:
        - Supervisor
      description: GET agent details
      operationId: getAgentShortDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentDetailResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}/details'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/supervisors/agents/{id}/customers':
    get:
      tags:
        - Supervisor
      description: GET all customers attached to an agent
      operationId: getAgentCustomers
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SupervisorCustomersPage'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/supervisors/agents/{id}/customers'
        requestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.path.sort: method.request.path.sort
          integration.request.path.page: method.request.path.page
          integration.request.path.size: method.request.path.size
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
    options:
      parameters:
        - name: sort
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
        type: mock
  '/notifications/{id}':
    get:
      tags:
        - Agency
      description: Notifications by id endpoint
      operationId: getNotificationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/notifications/{id}'
        requestParameters:
          integration.request.path.id: method.request.path.id
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /network-providers:
    get:
      tags:
        - Agency
      description: Get Network Providers endpoint
      operationId: getNetworkProviders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NetworkProvider'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/network-providers'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /home:
    get:
      tags:
        - Agency
      description: 'Statistics, and other agent-related information'
      operationId: getAgentHome
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/home'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /denominations:
    post:
      tags:
        - Agency
      description: Post denominations used for a transaction
      operationId: postDenominations
      parameters:
        - name: denomination
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/DenominationObject'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: POST
        uri: 'https://${stageVariables.albUrl}/agency/denominations'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /customers:
    get:
      tags:
        - Customers
      description: Customers endpoint
      operationId: getCustomers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CustomerResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/customers'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  '/customers/{customerId}':
    get:
      tags:
        - Customers
      description: Customer Details endpoint
      operationId: getCustomerDetails
      parameters:
        - name: customerId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/customers/{customerId}'
        requestParameters:
          integration.request.path.customerId: method.request.path.customerId
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /customers/search:
    get:
      tags:
        - Customers
      description: Customer Details Search endpoint
      operationId: getCustomerDetailsSearch
      parameters:
        - name: p
          in: query
          required: false
          schema:
            type: string
        - name: a
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDetailsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/customers/search'
        requestParameters:
          integration.request.path.p: method.request.path.p
          integration.request.path.a: method.request.path.a
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /cash-at-hand:
    get:
      tags:
        - Agency
      description: Cash at hand breakdown and other stats
      operationId: getCashAtHand
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CashAtHandResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/cash-at-hand'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
  /appstatus:
    get:
      tags:
        - Customers
      description: Application status for all pending applications
      operationId: getAppStatus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationStatusResponse'
        '400':
          description: 400 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-amazon-apigateway-integration:
        type: http_proxy
        httpMethod: GET
        uri: 'https://${stageVariables.albUrl}/agency/appstatus'
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
components:
  schemas:
    DepositScheduleRequest:
      required:
        - customerId
        - scheduledAmount
        - scheduledDate
      type: object
      properties:
        customerId:
          type: string
        scheduledAmount:
          type: integer
          format: int32
        scheduledDate:
          type: string
          format: date-time
    CustomerDepositSchedule:
      required:
        - agentId
        - customerId
        - dateCreated
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerId:
          type: string
        agentId:
          type: integer
          format: int64
        scheduledAmount:
          type: integer
          format: int32
        scheduledDate:
          type: string
          format: date-time
        dateCreated:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        title:
          type: string
        detail:
          type: string
        time:
          type: string
          format: date-time
        invalidParams:
          type: object
          additionalProperties:
            type: string
    IntermediaryModel:
      type: object
      properties:
        idNumber:
          type: string
        idType:
          type: string
          enum:
            - voters
            - voter
            - passport
            - driver_license
            - driver_licence
            - national_id
            - nhis
            - ssnit
            - tin
            - other
            - drivers
            - voters_old
        phoneNumber:
          type: string
        fullName:
          type: string
    TransactionRequest:
      required:
        - accountId
        - amount
        - currency
        - customerEncodedKey
        - customerPhoneNumber
      type: object
      properties:
        accountId:
          type: string
        customerEncodedKey:
          type: string
        customerPhoneNumber:
          type: string
        referenceNumber:
          type: string
        currency:
          type: string
        amount:
          type: number
        fee:
          type: number
        note:
          type: string
        locationCoordinates:
          type: string
        idempotencyKey:
          type: string
        intermediary:
          $ref: '#/components/schemas/IntermediaryModel'
    StatusResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - CREATED
            - PROCESSING
            - FAILED
            - CREATED_WITH_ERRORS
        uri:
          type: string
          format: uri
        detailMessage:
          type: string
        additionalError:
          type: integer
          format: int32
    TransactionDetailResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        branch:
          type: string
        accountNumber:
          type: string
        phoneNumber:
          type: string
        locationCoordinates:
          type: string
        notes:
          type: string
        profileUrl:
          type: string
          format: url
        transactionType:
          type: string
          enum:
            - DEPOSIT
            - WITHDRAWAL
            - PENDING_DEPOSIT
            - FLAGGED
            - PENDING_POST_ENTRY_DEBIT
            - PENDING_POST_ENTRY_CREDIT
            - POST_ENTRY_DEBIT
            - POST_ENTRY_CREDIT
        assigned:
          type: boolean
        amount:
          type: integer
          format: int64
        created:
          type: string
          format: date-time
    TaskRequest:
      type: object
      properties:
        customerId:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    InfoResponse:
      type: object
      properties:
        info:
          type: string
        uri:
          type: string
          format: uri
        detailMessage:
          type: string
    SignOffRequest:
      type: object
      properties:
        credentials:
          type: string
        agentId:
          type: string
        transactionHash:
          type: string
        clientPublicKey:
          type: string
    AgentCustomerAssignmentRequest:
      required:
        - phoneNumbers
      type: object
      properties:
        phoneNumbers:
          type: array
          items:
            type: string
    AgentCustomerAssignmentResponse:
      type: object
      properties:
        agentId:
          type: integer
          format: int64
        phoneNumbers:
          type: array
          items:
            type: string
        dateCreated:
          type: string
          format: date-time
    NotificationRequest:
      required:
        - channelId
        - deviceId
        - message
        - subject
      type: object
      properties:
        subject:
          type: string
        message:
          type: string
        deviceId:
          type: string
        channelId:
          type: string
          enum:
            - com.affinitylabs.agency.PUSH
            - com.affinitylabs.agency.LOGOUT
            - com.affinitylabs.agency.HOME
            - com.affinitylabs.agency.MESSAGE
            - com.affinitylabs.agency.UPDATE
        additionalInfo:
          type: object
          additionalProperties:
            type: string
    NotificationResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        channel:
          type: string
        additionalInfo:
          type: object
          additionalProperties:
            type: string
        created:
          type: string
          format: date-time
        read:
          type: boolean
    AgencyLoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        deviceId:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
        encodedKey:
          type: string
        expiresAt:
          type: string
        user:
          $ref: '#/components/schemas/User'
    RolePermission:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        emailVerifiedAt:
          type: string
        phoneNumber:
          type: string
        externalCustomerId:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RolePermission'
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/RolePermission'
    RefreshToken:
      type: object
      properties:
        expiresAt:
          type: string
        message:
          type: string
    DeviceRequest:
      type: object
      properties:
        fcmToken:
          type: string
        deviceFingerprint:
          type: string
        imei:
          type: string
        agentId:
          type: string
    DeviceResponse:
      type: object
      properties:
        fcmToken:
          type: string
        deviceFingerprint:
          type: string
        imei:
          type: string
        info:
          type: string
    UpdateCustomerIdRequest:
      type: object
      properties:
        customerId:
          type: string
        customerPhoneNumber:
          type: string
        mambuCustomerId:
          type: string
        dateCreated:
          type: string
          format: date-time
    CustomerApplication:
      type: object
      properties:
        clientInput:
          type: string
        otp:
          type: string
        lastUpdated:
          type: string
          format: date-time
        title:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        otherNames:
          type: string
        gender:
          type: string
          enum:
            - M
            - F
        dateOfBirth:
          type: string
          format: date
        countryOfBirth:
          type: string
        nationality:
          type: string
        maritalStatus:
          type: string
          enum:
            - SINGLE
            - MARRIED
            - DIVORCED
            - WIDOWED
        numberOfDependents:
          type: integer
          format: int32
        phoneNumbers:
          type: array
          items:
            type: string
        email:
          type: string
        employmentStatus:
          type: string
          enum:
            - EMPLOYED_FULL_TIME
            - EMPLOYED_PART_TIME
            - SELF_EMPLOYED
            - STUDENT
            - RETIRED
            - UNEMPLOYED
            - HOMEMAKER
        employmentType:
          type: string
          enum:
            - GOVERNMENT_EMPLOYEE
            - INFORMAL_WORKER
            - PRIVATE_SECTOR_EMPLOYEE
            - REGISTERED_BUSINESS_OWNER
            - CHARITY_NGO
        occupation:
          type: string
        employerName:
          type: string
        employmentAddress:
          type: string
        positionHeld:
          type: string
          enum:
            - OWNER
            - EMPLOYEE
            - MANAGEMENT
            - BOARD_TRUSTEE
        incomeSource:
          type: string
        appointmentDate:
          type: string
          format: date
        spouseTitle:
          type: string
        spouseFirstName:
          type: string
        spouseLastName:
          type: string
        spouseOtherNames:
          type: string
        spousePhoneNumber:
          type: array
          items:
            type: string
        spouseOccupation:
          type: string
        spouseEmployerName:
          type: string
        spouseEmploymentAddress:
          type: string
        spouseNextOfKin:
          type: boolean
        nextOfKinTitle:
          type: string
        nextOfKinFirstName:
          type: string
        nextOfKinLastName:
          type: string
        nextOfKinOtherNames:
          type: string
        nextOfKinPhoneNumber:
          type: array
          items:
            type: string
        nextOfKinRelationship:
          type: string
        area:
          type: string
        residentialAddress:
          type: string
        city:
          type: string
        street:
          type: string
        postalAddress:
          type: string
        region:
          type: string
          enum:
            - GREATER_ACCRA_REGION
            - ASHANTI_REGION
            - EASTERN_REGION
            - UPPER_EAST_REGION
            - UPPER_WEST_REGION
            - CENTRAL_REGION
            - NORTHERN_REGION
            - BONO_REGION
            - VOLTA_REGION
            - WESTERN_REGION
            - OTI_REGION
            - BONO_EAST_REGION
            - AHAFO_REGION
            - NORTH_EAST_REGION
            - SAVANNAH_REGION
            - WESTERN_NORTH_REGION
        tinNumber:
          type: string
        acceptedTermsAndConditions:
          type: boolean
        phoneNumberVerified:
          type: boolean
        idDocuments:
          type: array
          items:
            $ref: '#/components/schemas/CustomerApplicationDocument'
    CustomerApplicationDocument:
      type: object
      properties:
        id:
          type: string
        customerId:
          type: string
        documentKeys:
          type: array
          items:
            type: string
        documentUrls:
          type: array
          items:
            type: string
            format: url
        documentType:
          type: string
          enum:
            - PASSPORT
            - DRIVERS
            - NHIS
            - NATIONAL_ID
            - VOTERS_OLD
            - VOTERS_NEW
            - OTHER
            - SELFIE
            - PROOF_OF_RESIDENCE
        documentNumber:
          type: string
        extraFieldsJSON:
          type: string
        validated:
          type: boolean
        dateOfIssue:
          type: string
          format: date
        dateOfExpiry:
          type: string
          format: date
    OtpResponse:
      type: object
      properties:
        timeSent:
          type: string
          format: date-time
        nextAttemptMillis:
          type: integer
          format: int64
    AccountResponse:
      type: object
      properties:
        accountNumber:
          type: string
        encodedAccountNumber:
          type: string
        accountType:
          type: string
    SettingModel:
      type: object
      properties:
        key:
          type: string
          enum:
            - SMS_NOTIFICATION
            - PHONE_NOTIFICATION
            - OTHER
        value:
          type: string
    Pageable:
      type: object
      properties:
        sort:
          type: string
        page:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
    Sort:
      type: object
      properties:
        unsorted:
          type: boolean
        sorted:
          type: boolean
        empty:
          type: boolean
    TransactionResponse:
      type: object
      properties:
        hash:
          type: string
        depositTotal:
          type: integer
          format: int64
        agent:
          $ref: '#/components/schemas/AgentResponse'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorMessage'
    ErrorMessage:
      type: object
      properties:
        transactionId:
          type: string
        message:
          type: string
    PostEntryRequest:
      type: object
      properties:
        transactionId:
          type: string
        amount:
          type: number
        entryType:
          type: string
          enum:
            - CREDIT
            - DEBIT
        reason:
          type: string
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customerId:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
    AgentTargetRequest:
      type: object
      properties:
        dailyCreditLimit:
          type: integer
          format: int64
        monthlyTarget:
          type: integer
          format: int64
    AgentTargetResponse:
      type: object
      properties:
        dailyCreditLimit:
          type: integer
          format: int64
        monthlyTarget:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date
    GroupedTransactionResponse:
      type: object
      properties:
        hash:
          type: string
        depositTotal:
          type: integer
          format: int64
        agent:
          $ref: '#/components/schemas/AgentResponse'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
        referenceDate:
          type: string
          format: date-time
    AgentExtResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        names:
          type: string
        url:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        branchName:
          type: string
        deviceId:
          type: string
        supervisorNames:
          type: string
        cashAtHand:
          type: integer
          format: int64
        monthTotal:
          type: integer
          format: int64
        dailyLimit:
          type: integer
          format: int64
        monthlyTarget:
          type: integer
          format: int64
        totalCustomers:
          type: integer
          format: int64
        totalTransactions:
          type: integer
          format: int64
        totalCommission:
          type: integer
          format: int64
    AgentDetailResponse:
      type: object
      properties:
        id:
          type: string
        locationCoordinates:
          type: string
        cashAtHand:
          type: integer
          format: int64
        limit:
          type: integer
          format: int64
    SupervisorCustomerResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountNumber:
          type: string
        customerId:
          type: string
        phoneNumber:
          type: string
        branchName:
          type: string
        gender:
          type: string
        onboardingDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - PENDING_APPROVAL
            - INACTIVE
            - ACTIVE
            - EXITED
            - BLACKLISTED
            - REJECTED
        profileUrl:
          type: string
          format: url
        assigned:
          type: boolean
    DayStatusResponse:
      type: object
      properties:
        dateTime:
          type: string
          format: date
        status:
          type: string
          enum:
            - NOTHING
            - STARTED
            - ENDED
    StatisticsResponse:
      type: object
      properties:
        cashAtHand:
          type: integer
          format: int64
        customers:
          type: integer
          format: int32
        transactions:
          type: integer
          format: int32
        ecash:
          type: integer
          format: int64
    AgentResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        names:
          type: string
        url:
          type: string
        email:
          type: string
        encodedKey:
          type: string
    NetworkProvider:
      type: object
      properties:
        provider:
          type: string
          enum:
            - MTN_GH
            - VODA_GH
            - AIRTELTIGO_GH
        title:
          type: string
    CustomerResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountNumber:
          type: string
        customerId:
          type: string
        phoneNumber:
          type: string
        profileUrl:
          type: string
          format: url
        assigned:
          type: boolean
    HomeResponse:
      type: object
      properties:
        avatar:
          type: string
        cashAtHand:
          type: integer
          format: int64
        ecash:
          type: integer
          format: int64
        depositTotal:
          type: integer
          format: int64
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
    DenominationObject:
      type: object
      properties:
        transactionId:
          type: string
        denominations:
          type: array
          items:
            type: string
            enum:
              - '_1'
              - '_5'
              - '_10'
              - '_20'
              - '_50'
              - '_100'
              - '_200'
              - _1P
              - _5P
              - _10P
              - _20P
              - _50P
        total:
          type: number
    CustomerDetailsResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountNumber:
          type: string
        customerId:
          type: string
        phoneNumber:
          type: string
        profileUrl:
          type: string
          format: url
        assigned:
          type: boolean
        residentialAddress:
          type: string
        gps:
          type: string
        accountCreated:
          type: string
          format: date
        birthDate:
          type: string
          format: date
        depositAmount:
          type: integer
          format: int32
        depositTimes:
          type: array
          items:
            type: string
            format: date-time
        others:
          type: object
          additionalProperties:
            type: object
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/AccountResponse'
    CashAtHandResponse:
      type: object
      properties:
        cashAtHand:
          type: integer
          format: int64
        raisedSoFar:
          type: integer
          format: int64
        target:
          type: integer
          format: int64
        customers:
          type: integer
          format: int32
        customersInactive:
          type: integer
          format: int32
        accountsOpened:
          type: integer
          format: int32
        commissionStatsInfo:
          type: string
        commissionAccounts:
          type: integer
          format: int64
        commissionDeposit:
          type: integer
          format: int64
    LocationUpdateRequest:
      type: object
      properties:
        location:
          type: string
    ApplicationStatusResponse:
      type: object
      properties:
        key:
          type: string
        url:
          type: string
          format: url
        invalidParams:
          type: object
          additionalProperties:
            type: string
        application:
          $ref: '#/components/schemas/CustomerApplication'
    SupervisorCustomersPage:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/SupervisorCustomerResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    EndOfDayPage:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/GroupedTransactionResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    TransactionsPage:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TransactionDetailResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
    AgentsPage:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/AgentResponse'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/Sort'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/Pageable'
        empty:
          type: boolean
  securitySchemes:
    agent-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - 'arn:aws:cognito-idp:eu-west-1:591713881265:userpool/eu-west-1_eTclObIoJ'
        type: cognito_user_pools
